diff --git a/.lh/.lhignore b/.lh/.lhignore
new file mode 100644
index 0000000000000000000000000000000000000000..1de51008cdb76eb21c9111c14f6bb7b452241529
--- /dev/null
+++ b/.lh/.lhignore
@@ -0,0 +1,6 @@
+# list file to not track by the local-history extension. comment line starts with a '#' character
+# each line describe a regular expression pattern (search for 'Javascript regex')
+# it will relate to the workspace directory root. for example:
+# '.*\.txt' ignores any file with 'txt' extension
+# '/test/.*' ignores all the files under the 'test' directory
+# '.*/test/.*' ignores all the files under any 'test' directory (even under sub-folders)
diff --git a/.lh/index.dom.js.json b/.lh/index.dom.js.json
new file mode 100644
index 0000000000000000000000000000000000000000..76f2482dbd1e45539ab23ee6b265aadd095334d0
--- /dev/null
+++ b/.lh/index.dom.js.json
@@ -0,0 +1,18 @@
+{
+    "sourceFile": "index.dom.js",
+    "activeCommit": 0,
+    "commits": [
+        {
+            "activePatchIndex": 0,
+            "patches": [
+                {
+                    "date": 1721997575777,
+                    "content": "Index: \n===================================================================\n--- \n+++ \n"
+                }
+            ],
+            "date": 1721997575777,
+            "name": "Commit-0",
+            "content": "/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = typeof document !== 'undefined' && document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `Â¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n"
+        }
+    ]
+}
\ No newline at end of file
diff --git a/index.dom.js b/index.dom.js
index 5d0abe28bc8341a32470810212417a7546a3dac4..0c88f01c75f1df91bf570274890eb00b2cda24eb 100644
--- a/index.dom.js
+++ b/index.dom.js
@@ -2,7 +2,7 @@
 
 /* eslint-env browser */
 
-const element = document.createElement('i')
+const element = typeof document !== 'undefined' && document.createElement('i')
 
 /**
  * @param {string} value
